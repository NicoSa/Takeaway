{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid202\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\ri720
\ls1\ilvl0
\f0\fs24 \cf2 \'a5	Test time: Friday, the entire day + the weekend if you need it\
\'a5	Feel free to use google, your notes, books, etc but work on your own\
\pard\pardeftab720\ri720

\b \cf2 Task 1
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ri720
\ls2\ilvl0\cf2 \'a5	Reopen the Array class or subclass it.\
\'a5	Rewrite the inject method. Write a test for it first. Don't worry about returning an enumerator, assume a block is always given\
\'a5	Name your method differently (that is, not inject() or subclass Array) because rspec uses inject() internally, so the tests will fail with weird messages unless your implementation of inject is perfect.\
\'a5	If you would like a challenge, rewrite inject using two approaches: using iterators and using recursion but it\'92s not required to pass the test.\
\pard\pardeftab720\ri720

\b \cf2 Task 2
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ri720
\ls3\ilvl0\cf2 \'a5	Write a class Takeaway.\
\'a5	Implement the following functionality:\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\ri720
\ls3\ilvl1\cf2 \uc0\u9702 	list of dishes with prices\
\uc0\u9702 	placing the order by giving the list of dishes, their quantities and a number that should be the exact total. If the sum is not correct the method should raise an error, otherwise the customer is sent a text saying that the order was placed successfully and that it will be delivered 1 hour from now, e.g. "Thank you! Your order was placed and will be delivered before 18:52".\
\uc0\u9702 	The text sending functionality should be implemented using Twilio API. You'll need to register for it. It\'92s free.\
\uc0\u9702 	Use twilio-ruby gem to access the API\
\uc0\u9702 	Use a Gemfile to manage your gems\
\uc0\u9702 	Make sure that your Takeaway class is thoroughly tested and that you use mocks and/or stubs, as necessary to not to send texts when your tests are run\
\uc0\u9702 	However, if your Takeaway class is loaded into IRB and the order is placed, the text should actually be sent\
\pard\pardeftab720\ri720
\cf2 A free account on Twilio will only allow you to send texts to "verified" numbers. Use your mobile phone number, don't worry about the customer's mobile phone.
\f1 \cf0 \
}